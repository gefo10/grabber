{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  id: 1,\n  conversation_id: 1,\n  user_id: 1,\n  content: \"Hello\"\n}, {\n  id: 2,\n  conversation_id: 1,\n  user_id: 2,\n  content: \"Hi\"\n}, {\n  id: 3,\n  conversation_id: 2,\n  user_id: 1,\n  content: \"World\"\n}, {\n  id: 4,\n  conversation_id: 2,\n  user_id: 3,\n  content: \"Hi everyone\"\n}];\nconst messageSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    addMessage: (state, action) => {\n      state.push(action.payload);\n    },\n    removeMessage: (state, action) => {\n      return state.filter(message => message.id !== action.payload);\n    }\n  }\n});\nexport const {\n  addMessage,\n  removeMessage\n} = messageSlice.actions;\nexport const selectMessages = state => state.messages;\nexport default messageSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","id","conversation_id","user_id","content","messageSlice","name","reducers","addMessage","state","action","push","payload","removeMessage","filter","message","actions","selectMessages","messages","reducer"],"sources":["/Users/gefo/gefo/SideProjects/grabber-client/src/store/slices/messageSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\n\ninterface Message {\n    id: number;\n    conversation_id: number;\n    user_id: number;\n    content: string;\n}\n\nconst initialState: Message[] = [\n    { id: 1, conversation_id: 1, user_id: 1, content: \"Hello\" },\n    { id: 2, conversation_id: 1, user_id: 2, content: \"Hi\" },\n    { id: 3, conversation_id: 2, user_id: 1, content: \"World\" },\n    { id: 4, conversation_id: 2, user_id: 3, content: \"Hi everyone\" },\n];\n\n\nconst messageSlice = createSlice({\n    name: 'messages',\n    initialState,\n    reducers: {\n        addMessage: (state, action: PayloadAction<Message>) => {\n            state.push(action.payload);\n        },\n        removeMessage: (state, action: PayloadAction<number>) => {\n            return state.filter((message) => message.id !== action.payload);\n        },\n    }\n});\n\n\nexport const { addMessage, removeMessage } = messageSlice.actions;\nexport const selectMessages = (state: RootState) => state.messages;\nexport default messageSlice.reducer;\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAU7D,MAAMC,YAAuB,GAAG,CAC5B;EAAEC,EAAE,EAAE,CAAC;EAAEC,eAAe,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,OAAO,EAAE;AAAQ,CAAC,EAC3D;EAAEH,EAAE,EAAE,CAAC;EAAEC,eAAe,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,OAAO,EAAE;AAAK,CAAC,EACxD;EAAEH,EAAE,EAAE,CAAC;EAAEC,eAAe,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,OAAO,EAAE;AAAQ,CAAC,EAC3D;EAAEH,EAAE,EAAE,CAAC;EAAEC,eAAe,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,OAAO,EAAE;AAAc,CAAC,CACpE;AAGD,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAE,UAAU;EAChBN,YAAY;EACZO,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACnDD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC9B,CAAC;IACDC,aAAa,EAAEA,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MACrD,OAAOD,KAAK,CAACK,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACd,EAAE,KAAKS,MAAM,CAACE,OAAO,CAAC;IACnE;EACJ;AACJ,CAAC,CAAC;AAGF,OAAO,MAAM;EAAEJ,UAAU;EAAEK;AAAc,CAAC,GAAGR,YAAY,CAACW,OAAO;AACjE,OAAO,MAAMC,cAAc,GAAIR,KAAgB,IAAKA,KAAK,CAACS,QAAQ;AAClE,eAAeb,YAAY,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}